#!/usr/bin/perl

#
# Kleknev log file analyser
# Copyright (C) 2013, 2015, 2017  Matthew Skala
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Matthew Skala
# http://ansuz.sooke.bc.ca/
# mskala@ansuz.sooke.bc.ca
#

use Getopt::Long;
use XML::Parser;

########################################################################

# Categorization - needs to be made generic and configurable

sub categorize {
  $category[1]=$1 if $workingdir=~m!/([^/]+)$!;

  if ($process_argv[0] eq '/bin/sh') {
    if ($process_argv[2]=~m!MT1.*mpost['"]?\s+([a-z]+)-!s) {
      $category[0]='mt1';
      $savecat=$1;
      $category[2]=$savecat if $category[1]=~/^tsuku/;
    } elsif ($process_argv[2]=~m!RMO.*rmo.pe\s!s) {
      $category[0]='rmo';
    } elsif ($process_argv[2]=~m!TEX.*latex['"]?\s!s) {
      $category[0]='latex';
    } elsif ($process_argv[2]=~m!font(forge|anvil).*assemble-font.pe\s+([a-z]+)-!s) {
      $category[0]='assembly';
      $category[3]=$2;
    } elsif ($process_argv[2]=~m!^([a-zA-Z0-9\-_\./]*)/([^ /]+) !) {
      $category[0]=$2;
    }
  }
}

@schemata=('CATEGORY','WORKING DIRECTORY',
  'FAMILY (TSUKURIMASHOU MT1)',
  'FAMILY (TSUKURIMASHOU FONT ASSEMBLY)');

########################################################################

# Command line options

$opt_histogram=0;
$opt_linear=2;
$opt_logarithmic=0;
$opt_timeline=1;
$opt_toggle_timeline=0;

Getopt::Long::Configure ("bundling");
GetOptions(
  'histogram-samples|h=i'=>\$opt_histogram,
  'linear|i!'=>\$opt_linear,
  'logarithmic|l!'=>\$opt_logarithmic,
  't'=>\$opt_toggle_timeline,
  'timeline!'=>\$opt_timeline,
);

$opt_timeline=!$opt_timeline if $opt_toggle_timeline;
$opt_linear=!$opt_logarithmic if $opt_linear==2;

########################################################################

# Summary-statistics accumulation

sub accumulate_stat_add {
  my($s,$c,$t,$v)=@_;
  
  $stats{"$s:$c:$t"}+=$v;
  $stats{"$s:TOTAL:$t"}+=$v;
}

sub accumulate_stat_min {
  my($s,$c,$t,$v)=@_;
  
  $stats{"$s:$c:$t"}=$v
    if (!defined $stats{"$s:$c:$t"})
    || ($v<$stats{"$s:$c:$t"});
  $stats{"$s:TOTAL:$t"}=$v
    if (!defined $stats{"$s:TOTAL:$t"})
    || ($v<$stats{"$s:TOTAL:$t"});
}

sub accumulate_stat_max {
  my($s,$c,$t,$v)=@_;
  
  $stats{"$s:$c:$t"}=$v
    if (!defined $stats{"$s:$c:$t"})
    || ($v>$stats{"$s:$c:$t"});
  $stats{"$s:TOTAL:$t"}=$v
    if (!defined $stats{"$s:TOTAL:$t"})
    || ($v>$stats{"$s:TOTAL:$t"});
}

sub accumulate_stat_sample {
  my($s,$c,$t,$v)=@_;
  
  return unless $opt_histogram;
  if (!defined $stats{"$s:$c:$t"}) {
    $stats{"$s:$c:$t"}=[$v];
  } elsif ($stats{"$s:$c:count"}<=$opt_histogram) {
    push @{$stats{"$s:$c:$t"}},$v;
  } elsif (rand(1)<($opt_histogram/$stats{"$s:$c:count"})) {
    $stats{"$s:$c:$t"}->[int(rand($opt_histogram))]=$v;
  }
  if (!defined $stats{"$s:TOTAL:$t"}) {
    $stats{"$s:TOTAL:$t"}=[$v];
  } elsif ($stats{"$s:TOTAL:count"}<=$opt_histogram) {
    push @{$stats{"$s:TOTAL:$t"}},$v;
  } elsif (rand(1)<($opt_histogram/$stats{"$s:TOTAL:count"})) {
    $stats{"$s:TOTAL:$t"}->[int(rand($opt_histogram))]=$v;
  }
}

sub accumulate_stat_limits {
  my($s,$c,$t,$v)=@_;

  &accumulate_stat_add($s,$c,$t,$v);
  &accumulate_stat_min($s,$c,$t.'_min',$v);
  &accumulate_stat_max($s,$c,$t.'_max',$v);
  &accumulate_stat_sample($s,$c,$t.'_sample',$v);
}

sub accumulate_stats {
  for ($schema=0;$schema<=$#category;$schema++) {
    next if ($category[$schema] eq '') || ($category[$schema] eq 'IGNORE');
    &accumulate_stat_add($schema,$category[$schema],'count',1);
    &accumulate_stat_limits($schema,$category[$schema],'user',
      $rusage{'userSec'}+1e-6*$rusage{'userUSec'});
    &accumulate_stat_limits($schema,$category[$schema],'system',
      $rusage{'systemSec'}+1e-6*$rusage{'systemUSec'});
    &accumulate_stat_limits($schema,$category[$schema],'wallinc',
      $walltime-$start_time{$longpid});
    &accumulate_stat_min($schema,$category[$schema],'wall_min',
      $start_time{$longpid});
    &accumulate_stat_max($schema,$category[$schema],'wall_max',$walltime);
    &accumulate_stat_sample($schema,$category[$schema],
      'wall_sample',$walltime);
    &accumulate_stat_sample($schema,$category[$schema],
      'wall_sample',$start_time{$longpid});
  }
}

########################################################################

# Tetris-style graphics

@queued_lines=();

sub queue_lines {
  my(@lines)=split("\n",$_[0]);
  my($i,$j);
  my(%dtop)=();
  my(%dbot)=();
  
  my($longest)=1;
  foreach (@lines,@queued_lines) {
    $longest=length($_) if length($_)>$longest;
  }
  foreach (@queued_lines) {
    $longest=length($_) if length($_)>$longest;
  }
  
  for ($i=0;$i<=$#queued_lines;$i++) {
    $queued_lines[$i].=("\0"x($longest-length $queued_lines[$i]));
    for ($j=0;$j<$longest;$j++) {
      $dtop{$j}=$#queued_lines-$i
        if substr($queued_lines[$i],$j,1) ne "\0";
    }
  }

  for ($i=0;$i<=$#lines;$i++) {
    $lines[$i].=("\0"x($longest-length $lines[$i]));
    for ($j=0;$j<$longest;$j++) {
      $dbot{$j}=$i
        if (substr($lines[$i],$j,1) ne "\0") && !defined $dbot{$j};
    }
  }
  
  my($overlap)=$#lines+1;
  $overlap=$#queued_lines+1 if $#queued_lines<$#lines;
  while (($k,$v)=each %dtop) {
    if (defined $dbot{$k}) {
      $overlap=$v+$dbot{$k} if $v+$dbot{$k}<$overlap;
    }
  }

  my($qlc)=$#queued_lines;  
  for ($i=0;$i<=$#lines;$i++) {
    for ($j=0;$j<length($lines[$i]);$j++) {
      if ($j<length($queued_lines[$qlc-$overlap+$i+1])) {
        $oldc=substr($queued_lines[$qlc-$overlap+$i+1],$j,1);
      } else {
        $oldc="\0";
      }
      $oldc=substr($lines[$i],$j,1) if $oldc eq "\0";
      $fill_char{$j}=' ' unless defined $fill_char{$j};
      $oldc=$fill_char{$j} if ($oldc eq "\0") && (defined $dbot{$j})
        && ($i<$dbot{$j});
      if ($j<length($queued_lines[$qlc-$overlap+$i+1])) {
        substr($queued_lines[$qlc-$overlap+$i+1],$j,1)=$oldc;
      } else {
        $queued_lines[$qlc-$overlap+$i+1].=$oldc;
      }
    }
  }
  
  for ($i=0;$i<=$qlc-$overlap;$i++) {
    for ($j=0;$j<length($queued_lines[$i]);$j++) {
      $oldc=substr($queued_lines[$i],$j,1);
      if (($oldc eq "\0") && ((defined $dbot{$j}) || ($qlc-$1>30))) {
        $fill_char{$j}=' ' unless defined $fill_char{$j};
        substr($queued_lines[$i],$j,1)=$fill_char{$j};
      }
    }
  }
  
  while (($#queued_lines>0) && ($queued_lines[0]!~/\x00/)) {
    $_=shift @queued_lines;
    s/ +$//;
    print "$_\n";
  }
}

sub empty_queued_lines {
  while ($#queued_lines>=0) {
    $_=shift @queued_lines;
    s/\x00/ /g;
    s/ +$//;
    print "$_\n";
  }
}

########################################################################

# Lay out labels for use in timeline

sub concat_btob {
  my($margin,$left,$right)=@_;
  
  my(@leftlines)=split("\n",$left);
  my(@rightlines)=split("\n",$right);
  unshift(@leftlines,'') while $#leftlines<$#rightlines;
  unshift(@rightlines,'') while $#rightlines<$#leftlines;
  for (my $i=0;$i<=$#leftlines;$i++) {
    $leftlines[$i]=substr($leftlines[$i].("\0"x$margin),0,$margin)
                  .$rightlines[$i];
  }
  join("\n",@leftlines,'');
}

sub concat_btot {
  my($margin,$left,$right)=@_;
  
  my(@leftlines)=split("\n",$left);
  my(@rightlines)=split("\n",$right);
  my($a)=pop @leftlines;
  push @leftlines,substr($a.("\0"x$margin),0,$margin).(shift @rightlines);
  join("\n",@leftlines).join("\n".("\0"x$margin),'',@rightlines)."\n";
}

$old_wt_year=-1;
$old_wt_month=-1;
$old_wt_day=-1;
$old_wt_hour=-1;
$old_wt_minute=-1;
$old_wt_second=-1;
$old_wt_hund=-1;
@monthabbr=('Jan','Feb','Mar','Apr','May','Jun',
            'Jul','Aug','Sep','Oct','Nov','Dec');

sub time_marker {
  my($sec,$min,$hour,$mday,$mon,$year)=localtime($_[0]);
  my($hund)=int(100*($_[0]-int($_[0])));
  my($rval)='';

  if ($year!=$old_wt_year) {
    $rval=sprintf("*%04d*\n",$year+1900);
    $old_wt_year=$year;
    $old_wt_month=-1;
  }
  if (($mon!=$old_wt_month) || ($mday!=$old_wt_day)) {
    $rval.=sprintf("%s%02d\n",$monthabbr[$mon],$mday);
    $old_wt_month=$mon;
    $old_wt_day=$mday;
    $old_wt_hour=-1;
  }
  if (($hour!=$old_wt_hour) || ($min!=$old_wt_minute)) {
    $rval.=sprintf("%02d:%02d\n",$hour,$min);
    $old_wt_hour=$hour;
    $old_wt_minute=$min;
    $old_wt_second=-1;
  }
  if (($sec!=$old_wt_second) || ($hund!=$old_wt_hund)) {
    $rval.=sprintf(":%02d.%02d \n",$sec,$hund);
    $old_wt_second=$sec;
    $old_wt_hund=$hund;
  } else {
    $rval="      \n";
  }
  return $rval;
}

########################################################################

# XML parser

$leaf_node_width=14;
$internal_node_width=2;

%node_columns=('SPONTANEOUS'=>5);

sub max {
  my($a,$b)=@_;
  $a>$b?$a:$b;
}

sub min {
  my($a,$b)=@_;
  $a>$b?$b:$a;
}

$scan=new XML::Parser(Handlers=>{
  Start=>\&scan_start,
  End=>\&scan_end,
  Char=>\&scan_char,
});

sub scan_char {
  my($expat,$string)=@_;
  
  $process_argv[$#process_argv].=$string if $capturing_arg;
}

sub scan_start {
  my($expat,$element,%attributes)=@_;

  if ($element eq 'a') {
    $capturing_arg=1;
    push @process_argv,'';
  } elsif ($element eq 'char') {
    $process_argv[$#process_argv].=chr($attributes{'num'})
      if $capturing_arg;
  } elsif ($element eq 'e') {
    $pid=undef;
    $pidserial=0;
    $parentpid=undef;
    $exitstatus=undef;
    %rusage=();
    @process_argv=();
    @category=('UNKNOWN');
    $workingdir=undef;
  } elsif ($element eq 'exitStatus') {
    $exitstatus=$attributes{'value'};
  } elsif ($element eq 'hostName') {
    $hostname=$attributes{'name'};
  } elsif ($element eq 'parentPid') {
    $parentpid=$attributes{'value'};
  } elsif ($element eq 'pid') {
    $pid=$attributes{'value'};
  } elsif ($element eq 'resourceUsage') {
    $exitstatus=0+$exitstatus;
    %rusage=%attributes;
  } elsif ($element eq 'wallTime') {
    $walltime=$attributes{'sec'}+1e-9*$attributes{'nSec'};
  } elsif ($element eq 'workingDir') {
    $workingdir=$attributes{'path'};
  }
}

sub scan_end {
  my($expat,$element)=@_;
  
  if ($element eq 'a') {
    $capturing_arg=0;

  } elsif ($element eq 'e') {
    $pidserial=0+$seen_pids{"$hostname:$pid"};
    $seen_pids{"$hostname:$pid"}=$pidserial;
    $longpid="$hostname:$pid:$pidserial";
    if (defined $active_parents{$longpid}) {
      $longparent=$active_parents{$longpid};
    } elsif (defined $parentpid) {
      $longparent="$hostname:$parentpid:".
        (0+$seen_pids{"$hostname:$parentpid"});
    } else {
      $longparent="SPONTANEOUS";
    }

    if (defined $exitstatus) {
    
      @category=split("\n",$process_categories{$longpid});
      &accumulate_stats();

      $botblock="| $category[0]\n" 
        .substr(sprintf("| %#-0.05gu            ",
           $rusage{'userSec'}+1e-6*$rusage{'userUSec'}),0,14)."\n"
        .substr(sprintf("| %#-0.05gs            ",
           $rusage{'systemSec'}+1e-6*$rusage{'systemUSec'}),0,14)."\n"
        .substr(sprintf("\\=%#-0.05gr            ",
           $walltime-$start_time{$longpid}),0,14)."\n";
      if ($opt_timeline) {
        &queue_lines(&concat_btob($node_columns{$longpid},
          &time_marker($walltime),$botblock)
          .("\0"x$node_columns{$longpid}).(' 'x14)."\n");
        for ($i=0;$i<14;$i++) { $fill_char{$node_columns{$longpid}+$i}=' '; }
      }
      $last_queued=$longpid;

      $seen_pids{"$hostname:$pid"}++;
      delete $active_parents{$longpid};
      delete $node_columns{$longpid};
      delete $start_time{$longpid};
      delete $process_categories{$longpid};

    } else {
      $active_parents{$longpid}=$longparent;
      %tried=();
      $newcol=0;
      $test=$longpid;
      while (1) {
        $test=$active_parents{$test};
        $newcol=max($newcol,$node_columns{$test}+$internal_node_width);
        $tried{$test}=1;
        last if $test eq 'SPONTANEOUS';
      }
      while (1) {
        $badcol=0;
        while (($k,$v)=each %node_columns) {
          next if $tried{$k};
          if (abs($newcol-$v)<$leaf_node_width) {
            $badcol=1;
          }
        }
        if ($badcol) {
          $newcol+=$internal_node_width;
        } else {
          last;
        }
      }
      $node_columns{$longpid}=$newcol;
      $start_time{$longpid}=$walltime;
      
      &categorize;
      $process_categories{$longpid}=join("\n",@category);
      
      if ($opt_timeline) {
        if ($longparent eq 'SPONTANEOUS') {
          $topblock=substr(">=$pid:$pidserial            ",0,14)."\n"
                   .substr("| $hostname            ",0,14)."\n";
          &queue_lines(&concat_btot($node_columns{$longpid},
            &time_marker($walltime),$topblock));
        } else {
          &queue_lines(("\0"x$node_columns{$longparent}).'|             ')
            if $last_queued eq $longparent;
          $topblock=substr("<=$pid:$pidserial            ",0,14)."\n"
                   .substr("| $hostname            ",0,14)."\n";
          $gapsize=$node_columns{$longpid}-$node_columns{$longparent};
          &queue_lines(&concat_btot($node_columns{$longparent},
            &time_marker($walltime),
            &concat_btot($gapsize,'+'.('-'x($gapsize-1)),$topblock)));
        }
        $fill_char{$node_columns{$longpid}}='|';
      }
      $last_queued=$longpid;
      for ($i=0;$i<11;$i++) {
        last if $i>=length($category[0]);
        if ($category[0] eq 'UNKNOWN') {
          $fill_char{$node_columns{$longpid}+2+$i}=' ';
        } else {
          $fill_char{$node_columns{$longpid}+2+$i}=
            substr($category[0],$i,1);
        }
      }
    }
  }
}

########################################################################

# XML scan and timeline generation

print (('='x78)."\n");
print "  KLEKNEV 0.1 PROFILING REPORT\n";
print (('='x78)."\n") if $opt_timeline;

@saved_argv=@ARGV;

%seen_pids=();
%active_parents=();
$parser=$scan->parse_start();
$parser->parse_more("<?xml version=\"1.0\" ?>\n<logfile>\n");
while (<>) {
  s/&#(\d+);/<char num="$1" \/>/g;
  $parser->parse_more($_);
}
$parser->parse_more("</logfile>\n");
$parser->parse_done();

if (0<scalar %active_parents) {
  &queue_lines(&concat_btob(31,'',<<EOF)) if $opt_timeline;
****************
* interrupted! *
****************
EOF
}
&empty_queued_lines() if $opt_timeline;

########################################################################

# Summary report generation

sub form_f8 {
  my($f)=@_;
  
  if ($f>9999.999) {
    return sprintf('%8.02E',$f);
  } elsif ($f>0.009) {
    return sprintf('%8.03f',$f);
  } elsif ($f>1e-9) {
    return sprintf('%8.02e',$f);
  } elsif ($f>-1e-9) {
    return '   0    ';
  } elsif ($f>-0.001) {
    return sprintf('%8.01e',$f);
  } elsif ($f>-1000) {
    return sprintf('%8.03f',$f);
  } else {
    return sprintf('%8.01E',$f);
  }
}

sub form_histogram {
  my($s,$c,$t,$w)=@_;
  my($i,$lo,$hi,$histmax,$rval,@histogram)=();
  
  return '' if $w==0;
  $lo=$stats{"$s:$c:${t}_min"};
  $hi=$stats{"$s:$c:${t}_max"};
  return $w==1?'|':' 'x$w if $hi==$lo;
  foreach (@{$stats{"$s:$c:${t}_sample"}}) {
    $i=int(($_-$lo)*($w-0.01)/($hi-$lo));
    $histogram[$i]++;
    $histmax=$histogram[$i] if $histogram[$i]>$histmax;
  }
  return ' 'x$w if $histmax==0;
  $rval='';
  for ($i=0;$i<$w;$i++) {
    if ($histogram[$i]==0) {
      $rval.=' ';
    } elsif (($histogram[$i]==$histmax) && ($histmax>=5)) {
      $rval.='$';
    } else {
      $rval.=substr(' .oO@',
        min($histogram[$i],1+int($histogram[$i]*4/$histmax)),1);
    }
  }
  $rval;
}

sub form_log_histogram {
  my($s,$c,$t,$w)=@_;
  my($i,$lo,$hi,$histmax,$rval,@histogram)=();
  
  return '' if $w==0;
  $lo=$stats{"$s:$c:${t}_min"};
  $hi=$stats{"$s:$c:${t}_max"};
  $lo=$hi/1000 if $lo==0;
  $lo=log($lo);
  $hi=log($hi);
  return $w==1?'|':' 'x$w if $hi==$lo;
  foreach (@{$stats{"$s:$c:${t}_sample"}}) {
    if ($_<=0) {
      $i=0;
    } else {
      $i=int((log($_)-$lo)*($w-0.01)/($hi-$lo));
      $i=0 if $i<0;
      $i=$w-1 if $i>=$w;
    }
    $histogram[$i]++;
    $histmax=$histogram[$i] if $histogram[$i]>$histmax;
  }
  return ' 'x$w if $histmax==0;
  $rval='';
  for ($i=0;$i<$w;$i++) {
    if ($histogram[$i]==0) {
      $rval.=' ';
    } elsif (($histogram[$i]==$histmax) && ($histmax>=5)) {
      $rval.='$';
    } else {
      $rval.=substr(' .oO@',
        min($histogram[$i],1+int($histogram[$i]*4/$histmax)),1);
    }
  }
  $rval;
}

sub form_table {
  my($headline,$tag)=@_;
  
  print "$headline\n";
  print 'class              n            total      '
       .'    minimum     mean  maximum';
  if ($opt_histogram) {
    print '                linear histogram' if $opt_linear;
    print '           logarithmic histogram' if $opt_logarithmic;
  }
  print "\n";

  foreach (@categories) {
    printf "%s %8g %6s  %s %6s  %s %s %s",
      substr("$_           ",0,11),
      $stats{"$schema:$_:count"},
      '('.int(100.1*$stats{"$schema:$_:count"}/
          $stats{"$schema:TOTAL:count"}).'%)',
      &form_f8($stats{"$schema:$_:$tag"}),
      '('.int(100.1*$stats{"$schema:$_:$tag"}/
          $stats{"$schema:TOTAL:$tag"}).'%)',
      &form_f8($stats{"$schema:$_:${tag}_min"}),
      &form_f8($stats{"$schema:$_:$tag"}/$stats{"$schema:$_:count"}),
      &form_f8($stats{"$schema:$_:${tag}_max"});
    if ($opt_histogram) {
      print '  '.&form_histogram($schema,$_,$tag,30) if $opt_linear;
      print '  '.&form_log_histogram($schema,$_,$tag,30) if $opt_logarithmic;
    }
    print "\n";
  }
  print "\n";
}

for ($schema=0;$schema<=$#schemata;$schema++) {
  next if $stats{"$schema:TOTAL:count"}==0;

  print (('='x78)."\n");
  print "  STATISTICS BY $schemata[$schema]\n\n";
  
  @categories=();
  foreach (keys %stats) {
    push @categories,$1 if (/^$schema:(.*):count$/) && ($1 ne 'TOTAL');
  }
  @categories=sort
    {$stats{"$schema:$a:wall_min"}<=>$stats{"$schema:$b:wall_min"}} @categories;
  push @categories,'TOTAL';

  $globalstart=$stats{"$schema:TOTAL:wall_min"};
  $globalspan=$stats{"$schema:TOTAL:wall_max"}-$globalstart;
  print "Overall real time (start of first to end of last)\n";
  foreach (@categories) {
    $barstart=int(50.01*($stats{"$schema:$_:wall_min"}-$globalstart)/$globalspan);
    $barend=int(50.01*($stats{"$schema:$_:wall_max"}-$globalstart)/$globalspan);
    if (($_ eq 'TOTAL') || !$opt_histogram) {
      $bar=(' 'x$barstart).'|';
      $bar.=(($_ eq 'TOTAL'?'=':'-')x($barend-$barstart-1)).'|'
        if $barend-$barstart>=1;
      substr($bar,$barstart+int(($barend-$barstart-length($_))/2),
        length($_))=$_ if $barend-$barstart>length($_)+4;
    } else {
      $bar=(' 'x$barstart).
        &form_histogram($schema,$_,'wall',$barend-$barstart+1);
    }
    printf "%s %s %6s %s\n",substr("$_           ",0,11),
      &form_f8($stats{"$schema:$_:wall_max"}-$stats{"$schema:$_:wall_min"}),
      '('.int(100.1*($stats{"$schema:$_:wall_max"}-$stats{"$schema:$_:wall_min"})/
         $globalspan).'%)',$bar;
  }
  print "\n";

  &form_table('User CPU time per process, including children','user');
  &form_table('System CPU time per process, including children','system');
}

########################################################################

print <<EOF;
==============================================================================
  END
==============================================================================
EOF

